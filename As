 ```cpp
 MyDatabase::MyDatabase() {
     int rc = sqlite3_open("telegram_data.db", &db);
     if (rc != SQLITE_OK) {
         printf("Failed to open SQLite database: %s\n", sqlite3_errmsg(db));
         return;
     }

     const char* createContactsTable = 
         "CREATE TABLE IF NOT EXISTS contacts (id TEXT PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT, phone_number TEXT);";
     if (sqlite3_exec(db, createContactsTable, nullptr, nullptr, nullptr) != SQLITE_OK) {
         printf("Failed to create contacts table: %s\n", sqlite3_errmsg(db));
     }
     // Giữ nguyên phần còn lại
 }

 void MyDatabase::saveContact(uint64_t id, const std::string& username, const std::string& firstName, const std::string& lastName, const std::string& phone) {
     std::string sql = "INSERT OR REPLACE INTO contacts (id, username, first_name, last_name, phone_number) VALUES (?, ?, ?, ?, ?);";
     sqlite3_stmt* stmt;
     if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) != SQLITE_OK) {
         printf("SQLite prepare error: %s\n", sqlite3_errmsg(db));
         return;
     }

     char idStr[20];
     snprintf(idStr, sizeof(idStr), "%llu", id);
     printf("Saving to SQLite - id: %s\n", idStr);

     sqlite3_bind_text(stmt, 1, idStr, -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 2, username.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 3, firstName.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 4, lastName.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 5, phone.c_str(), -1, SQLITE_STATIC);

     if (sqlite3_step(stmt) != SQLITE_DONE) {
         printf("SQLite step error: %s\n", sqlite3_errmsg(db));
     }
     sqlite3_finalize(stmt);
 }


 ```cpp
 void MyDatabase::saveContact(uint64_t id, const std::string& username, const std::string& firstName, const std::string& lastName, const std::string& phone) {
     std::string sql = "INSERT OR REPLACE INTO contacts (id, username, first_name, last_name, phone_number) VALUES (?, ?, ?, ?, ?);";
     sqlite3_stmt* stmt;
     if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) != SQLITE_OK) {
         printf("SQLite prepare error: %s\n", sqlite3_errmsg(db));
         return;
     }

     printf("Saving to SQLite - id: %llu\n", id);
     sqlite3_bind_int64(stmt, 1, id);  // Truyền trực tiếp uint64_t

     sqlite3_bind_text(stmt, 2, username.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 3, firstName.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 4, lastName.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 5, phone.c_str(), -1, SQLITE_STATIC);

     if (sqlite3_step(stmt) != SQLITE_DONE) {
         printf("SQLite step error: %s\n", sqlite3_errmsg(db));
     }
     sqlite3_finalize(stmt);
 }


 ```cpp
 MyDatabase::MyDatabase() {
     int rc = sqlite3_open("telegram_data.db", &db);
     if (rc != SQLITE_OK) {
         printf("Failed to open SQLite database: %s\n", sqlite3_errmsg(db));
         return;
     }

     const char* createContactsTable = 
         "CREATE TABLE IF NOT EXISTS contacts (id TEXT PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT, phone_number TEXT);";
     if (sqlite3_exec(db, createContactsTable, nullptr, nullptr, nullptr) != SQLITE_OK) {
         printf("Failed to create contacts table: %s\n", sqlite3_errmsg(db));
     }
     // Giữ nguyên phần còn lại
 }

 void MyDatabase::saveContact(uint64_t id, const std::string& username, const std::string& firstName, const std::string& lastName, const std::string& phone) {
     std::string sql = "INSERT OR REPLACE INTO contacts (id, username, first_name, last_name, phone_number) VALUES (?, ?, ?, ?, ?);";
     sqlite3_stmt* stmt;
     if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) != SQLITE_OK) {
         printf("SQLite prepare error: %s\n", sqlite3_errmsg(db));
         return;
     }

     char idStr[20];
     snprintf(idStr, sizeof(idStr), "%llu", id);
     printf("Saving to SQLite - id: %s\n", idStr);

     sqlite3_bind_text(stmt, 1, idStr, -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 2, username.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 3, firstName.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 4, lastName.c_str(), -1, SQLITE_STATIC);
     sqlite3_bind_text(stmt, 5, phone.c_str(), -1, SQLITE_STATIC);

     if (sqlite3_step(stmt) != SQLITE_DONE) {
         printf("SQLite step error: %s\n", sqlite3_errmsg(db));
     }
     sqlite3_finalize(stmt);
 }
