#include <sqlite3.h>

sqlite3 *db;

void openDatabase() {
    if (sqlite3_open("telegram_backup.db", &db) == SQLITE_OK) {
        const char *createContactsTable =
            "CREATE TABLE IF NOT EXISTS contacts ("
            "id INTEGER PRIMARY KEY, name TEXT, phone TEXT);";
        sqlite3_exec(db, createContactsTable, 0, 0, 0);

        const char *createMessagesTable =
            "CREATE TABLE IF NOT EXISTS messages ("
            "id INTEGER PRIMARY KEY, chat_id INTEGER, "
            "sender TEXT, message TEXT, timestamp INTEGER);";
        sqlite3_exec(db, createMessagesTable, 0, 0, 0);
    }
}

int main(int argc, char *argv[]) {
    openDatabase(); // Mở database khi Telegram chạy
    return Telegram::exec(argc, argv);
}



void saveContactToDB(int id, const std::string &name, const std::string &phone) {
    std::string sql = "INSERT INTO contacts (id, name, phone) VALUES (?, ?, ?);";
    sqlite3_stmt *stmt;
    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, 0) == SQLITE_OK) {
        sqlite3_bind_int(stmt, 1, id);
        sqlite3_bind_text(stmt, 2, name.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 3, phone.c_str(), -1, SQLITE_STATIC);
        sqlite3_step(stmt);
        sqlite3_finalize(stmt);
    }
}





for (const auto &contact : contacts) {
    saveContactToDB(contact.id, contact.name, contact.phone);
}




void saveMessageToDB(int chat_id, const std::string &sender, const std::string &message, int timestamp) {
    std::string sql = "INSERT INTO messages (chat_id, sender, message, timestamp) VALUES (?, ?, ?, ?);";
    sqlite3_stmt *stmt;
    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, 0) == SQLITE_OK) {
        sqlite3_bind_int(stmt, 1, chat_id);
        sqlite3_bind_text(stmt, 2, sender.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 3, message.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_int(stmt, 4, timestamp);
        sqlite3_step(stmt);
        sqlite3_finalize(stmt);
    }
}








void HistoryManager::addMessage(MessageData message) {
    saveMessageToDB(message.chatId, message.senderName, message.text, message.timestamp);
}
