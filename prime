
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;
#include<vector>

long long SquareAndMultiply(long long x, long long H, long long n) {
	unsigned long long r = 1;
	long long bin[64];
	long long i = 0;

	for (; H > 0; H /= 2) {
		bin[i++] = H % 2;
	}

	for (long long j = i - 1; j >= 0; --j) {
		r = (r * r) % n;

		if (bin[j] == 1) {
			r = (r * x) % n;
		}
	}
	return r;
}

bool FermatTest(long long n)
{
	long long t = 4;
	for (int i = 2; i <= t; i++)
	{
		if (SquareAndMultiply(i, n - 1, n) != 1)
		{
			return false;
		}
	}
	return true;
}
vector <long long > FermatTestEx(long long a, long long b)
{
	vector<long long> primes;
	for (long long i = a; i <= b; i++)
	{
		if (FermatTest(i))
		{
			primes.push_back(i);
		}
	}
	return primes;
}
bool MillerRabinTest(long long n, long long t=3)
{
	if (n <= 1 || n == 4)
	{
		return false;
	}
	if (n <= 3)
	{
		return true;
	}
	long long d = n - 1;
	while (d % 2 == 0)
	{
		d /= 2;
	}
	for (long long i = 0; i < t; i++)
	{
		long long a = 2 + rand() % (n - 3);
		long long  x = SquareAndMultiply(a, d, n);
		if (x == 1 || x == n - 1)
		{
			continue;
		}
		while (d != n - 1)
		{
			x = (x * x) % n;
			d *= 2;
			if (x == 1)
			{
				return false;
			}
			if (x == n - 1)
			{
				break;
			}
		}
		if (x != n - 1)
			return false;
	}
	return true;
}
vector <long long > MillerRabinTestEx(long long a, long long b)
{
	vector <long long> primes;
	long long t = 3;
	for (long long i = a; i <= b; i++)
	{
		if (MillerRabinTest(i, t))
		{
			primes.push_back(i);
		}
	}
	return primes;
}
int main() {
	long long n;
	cout << "enter n ";
	cin >> n;
	if (n < 3)
	{
		cout << " wrong input";
	}
	else {
		//bool check = FermatTest(n);
		bool check  = MillerRabinTest(n);
		if (check == 1) cout << n << " is a prime number";
		else cout << n << "is a composite number";
	}
	
	//long long a = SquareAndMultiply(2, 382, 383);
	//cout << a;
	//vector<long long> ans = FermatTestEx(100, 150);
	//for (auto n : ans)
	//{
	//	cout << n << " ";
	//}
	//return 0;
}
